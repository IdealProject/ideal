---
title: Assembler, Introducción
draft: false
description: >-
  Resumen de materiales y apuntes que buscan introducir al lector a la
  programación en lenguaje ensamblador. 
authors:
  - christopher-mendoza
major:
  discriminant: infor
  value:
    discriminant: '3'
    value: Pa
---
# Registros

Existen en total 14 registros
Inicialmente utilizamos 4 (**ax,bx,cx,dx**) de 16bits c/u que a su vez se dividen en 2 registros de 8bits, su parte baja y alta (ah,al).

## Asignación

lo que en otros lenguajes hariamos tal que:

```java
x=42;
y=24;
z= x+y;
```

en Assembler lo hariamos con instrucciones para denotar los operadores.

```nasm
mov x, 42
mov y, 24
add z, x
add z, y
```

Tenemos que tener en cuenta que ensamblador utiliza los códigos Ascii de los caracteres para almacenarlos, la letra A, al ser guardada en el registro bx, realmente solo estariamos usando su parte baja ya que el codigo no supera 8bits de información permitidos en la parte baja.

```nasm
mov bx,65d
MOV BL,'A'
```

Resultaron en lo mismo, guardar el código hexadecimal del caracter A, en el registro bl.
No es necesario aprendernos todos los códigos ASCII, esto lo hace automáticamente emu8086 si lo colocamos entre apostrofes.
Otro detalle importante, ensamblador finalmente convierte todo en mayusculas por ende no es problema si utilizas minusculas o mayusculas, pero recuerda ser consistente en tu forma de escribir código.

# MOV

Una instrucción que nos permite copiar el contenido de un registro dentro de otro, como ya vimos anteriormente.

```nasm

```
