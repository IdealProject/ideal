---
title: Cap 12 Int-Java
draft: false
description: >-
  Resumen del cap 12 del libro introducción a la programación con Java, para
  evaluación en la materia Int a la Programación 2
authors:
  - christopher-mendoza
major:
  discriminant: infor
  value:
    discriminant: '2'
    value: P2
---
# Resumen Cap 12

###### Libro: Introducción a la programación con JAVA (John S. Dean, Raymon H. Dean)

# Agregación, composición y herencia

## Formas para Organizar una clase:

- Agregación Normal (Una clase es el todo, las otras son parte de ese todo).

- Herencia (Una clase base, las demas heredan de la primera).

En ciertos casos pueden trabajar en conjunto.

## Composición y agregación

Existen dos formas de agregación, la ya mencionada Agregación Normal y la **Agregación Compuesta(Composición)**que se diferencia porque la clase todo es "propietaria exclusiva" de las demas clases que las conforman, por ende estas no pueden ser parte de otra clase.

Las clases de la agregación tienen solo un propietario a la vez, pueden ser "transplantados" pero siempre existen en un "propietario" a la vez.

En los UML, la figura de diamante rellenada(◆) denota una composición, en cambio un diamante vacio(◇) una agregación.

### Reglas de implementación

- Agregación: Se guarda el objeto en la clase contenedora en una variable de referencia y también en otra  variable de referencia fuera de la clase contenedora para poder ser asignada en mas de una clase luego.
- Composición: Se guarda unicamente en una variable de referencia dentro de la clase contenedora.

### Ejemplo en el mundo real

Imagina un concesionario de autos, las personas que trabajan en el tienen una relación de **Agregación**porque estas pueden trabajar en otra tienda o tener mas responsabilidades personales. En cambio, los autos tienen una relación de **Composición**ya que esos autos solo pertenecen a esta tienda y ninguna más.

## Herencia

Describe un anidamiento de conceptos que van escalando de lo mas especifico a lo mas general.

Son clases con metodos bases que podemos ir heredando en nuevas clases de forma que obtenemos las funcionalidades de la clase original pero agregamos lo nuevo que necesitamo.

Las mas generales se consideran *superClase* y las más específicas como *subClase.*Otros terminnos menos formales pero también muy utlizados son Clase Padre o Clase Base para las *superClase* y Clase Hijo o Clase derivada para las *subClases.*

En los UML, para denotar herencia se utiliza, utilizamos una linea continua con punta en flecha hueca (⇾) apuntando a la superclase.

### Beneficios de la Herencia

Lo básico seria la reutilización de código cosa que siempre es buena manteniendonos en la idea de código DRY (Don't Repeat Yourself), La modularización (Encapsulamiento) es una gran forma de organizar y mantener las cosas en donde deben estar sin poder acceder a ellas de formas inadecuadas que puedan ocacionar problemas, por ende hace mejora el mantenimiento y escalabilidad del código.

### Implementación de la Herencia

```java
public class
```

### Ejemplo en el mundo real

Imagina una persona, pueden caminar, respirar, Hablar como funciones básicas, a partir de esta clase podrias crear la clase Cliente, que hereda de la clase persona, Hablar ,caminar y respirar pero le estariamos agregando cosas como pagar entre otras cosas. siendo la clase **cliente una subClase** de la **superClase Persona**.
