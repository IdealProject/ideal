---
title: Notas Sistemas Distribuidos(2023)
draft: false
description: Contiene mis notas de la asignatura de Sistemas Distribuidos
authors: 
  - adan-alvarez
  - marcelo-ferreira
major:
  discriminant: infor
  value:
    discriminant: '7'
    value: Sw
---
# Sistemas Distribuidos

Cada nodo puede correr una aplicación que utiliza el resto del sistema.

Requisito: que todos los componentes estén dentro de una red, software y hardware.

Comunican sus acciones por el paso de mensajes (protocolo de la comunicación de cada componente).

## Características

  - **Concurrencia de componentes**: quieren hacer uso de un recurso compartido los procesos.

    - Proceso: Tarea o programa en ejecución

    - Clientes: los clientes piden recursos, también puede ser servidor de otro.

    - Servidores: proveen los recursos, a su vez puede ser un cliente.

    Recursos: Depende del contexto puede variar, en síntesis es otro componente del sistema.

- **Inexistencia de un reloj global**: el factor tiempo no es parámetro para sincronizar procesos o componentes, lo solucionamos con comunicaciones por mensaje. Solo afecta en contexto, ej: el reinicio de los servidores según una hora local.

- **Fallos Independientes**: Falla de componentes individualmente sin afectar a todo el sistema.

## Ejemplos SD

- **Internet y sus protocolos**
- **Intranet**: Conexión local administrada para proteger los recursos de una organización.
- **Computación Móvil**: acceso no dependiendo de la ubicación.
- **Ubicua**: Dentro de un área se puede usar un componente.

## Porque compartir recursos

- Ahorrar gastos, comparte recursos y distribuye las cargas.

- Servicio: es netamente software, colección de recursos relacionados, proveer de autogestión a los clientes.

- Servidor: Proceso que provee de recursos.

- Cliente: Proceso que realiza un pedido.

- El Navegador no es un servidor nunca.

---

- **Invocación Remota:** cuando se completa la tarea de pedido/respuesta, con éxito o fallida.


- **WWW:** sistema para publicar recursos y servicios a través de internet: siempre se ejecuta sobre una pila de protocolos.



- **URL:** mecanismo para los clientes pedir un recurso.

- **Esquema**: protocolo a usar
- **Localización**: ip/DNS
- **Nombre del servicio/recurso**: Parámetros: lo que sigue del path
- **?Lo que se envía al servidor**
- **Navegar dentro de la web evitar hacer pedidos innecesarios, solo cuando ya cargó.**

## Http-Características

- **Control de acceso simple**
- **Common gateway Interface (CGI)**: Aplicación que desarrollamos con la idea de compartir recursos.
- **Código descargado**: su función es descargarse en el cliente y realizar tareas para el servidor.
- **Applet**: descargar porciones de código en el cliente y ejecutarlo.
- **Código Móvil**: descarga en tu navegador y recolecta información para un servidor. Es un cliente porque al recabar información, si llega a abrir un puerto y escuchar las peticiones de mi servidor se convierte en servidor.

## Desafíos

1. **Heterogeneidad**: Diversidad, tener cosas en diferentes contextos
   - Debe correr sobre cualquier red.
   - Debe correr sobre cualquier hardware dentro de un estándar.
   - Debe correr en cualquier SO.
   - Debe soportar diferentes lenguajes.
   - Implementación de diferentes desarrolladores.
   - Respetar estándares.
   - **MIDDLEWARE**: se encarga de lidiar con la mayoría de problemas de heterogeneidad.

2. **Extensibilidad**: determina el grado en que puede crecer mi sistema. Sin realizar cambios al proyecto inicial. Solo debe existir un código fuente, no debe depender del hardware que lo ejecuta.

3. **Seguridad**:
   - **Confidencialidad**: protección contra individuos no autorizados.
   - **Integridad**: consistencia de datos.
   - **Disponibilidad**: Que la Información del usuario esté disponible la mayor parte del tiempo.

### Desafíos a Cubrir

1. **Ataques de denegación de servicios**: obstaculizar un servicio, atacar al servicio con un número suficiente de peticiones inútiles de manera a bloquear el acceso a usuarios autorizados.
2. **Seguridad de código Móvil**: permitir o no a software de terceros.

4. **Escalabilidad**: Poder agregar componentes para mantener el comportamiento y conservar la efectividad. Incrementando el número de recursos y el número de usuarios.

### Representan los siguientes desafíos

- Control de costes de los recursos
- Control de pérdidas de prestaciones.
- Prevención de desbordamiento de recursos Software.
- Evitar cuello de botella de prestaciones, algoritmos descentralizados, cache y replicación.

5. **Tratamiento de fallos**: plan de contingencia, los fallos en SD son parciales

   - **Detección de fallos**
   - **Enmascaramiento de fallos**: ocultar fallos
     - Retransmisión de las fallas.
     - Escritura de logs
   - **Tolerancia de Fallos**: login, páginas sin permiso
   - **Recuperación frente a fallos**
   - **Redundancia**
   - **Disponibilidad**: aumentar el tiempo online.

6. **Concurrencia**: más de un proceso quiere acceder a un recurso compartido.
   - Hilos
   - Sincronizar semáforos

7. **Transparencia**: ocultar al programador y al usuario la separación de componentes del SD
   - Transparencia de acceso: local y remoto de la misma forma. Necesitar recordar solo 1 url para acceder a todas las apps.
   - Transparencia de ubicación: no necesita saber dónde está su aplicación.
   - Transparencia de concurrencia: no debe notarse cuando hay una concurrencia.
   - Transparencia de replicación: Que haya o no haya no debe importar.
   - Transparencia frente a fallos.
   - Transparencia de movilidad: reubicación de servidores, solo URL.
   - Transparencia de prestaciones: configurable.
   - Transparencia al escalado: no debe notar cuando incrementa o decrementa un recurso de la arquitectura.

## Clase 2

### Modelos de arquitectura

Modelo Arquitectónico: define cómo (mecanismo) y dónde interaccionan los componentes y cómo están vinculados.

- Las dos vistas: uno debe saber la complejidad de todo y el otro debe ser transparente.
- Simplifica y abstrae las funciones individuales y considera, la ubicación de los componentes y carga de trabajo. Proceso y Carga diferencia, un proceso implica datos, memorias, etc. Trabajo: lo que se necesita hacer.
- Debe saber cómo se comunican entre sí.
- Clasifica quién va a ser servidor, cliente e iguales. Igual significa que no importa a cual se le pida podrá resolver el problema.

### Clasificación

- **Cliente-Servidor**:
  1. Partición de datos, o replicación en servidores cooperativos. Replicación si los pedidos se insertan en ambas DB. Replicación de instancias = procesos iguales.
  2. Uso de Caché para los datos en clientes y el proxy. Cache es memoria, se usa para almacenar datos que fueron recientemente utilizados o frecuentemente utilizados.
  3. Uso de código y agentes móviles.
  4. Requisitos de agregar o eliminar dispositivos móviles de forma conveniente.

- **Peer-to-peer**: Cada proceso servidor de un cluster son replicas. Todos saben todo y todos pueden acceder a todo.
- **Modelos de Requisitos no funcionales**:
  1. Modelo de interacción. Cómo manejar situaciones extremas.
  2. Modelo de fallos. Cómo resolver los fallos
  3. Modelo de seguridad. Cuándo encriptar y demás.

### Capas de Software

1. **Arquitectura de software**: se refieren a la estructura del software como capas o módulos en un solo computador. Esta vista de procesos y servicios puede expresarse en términos de capas de servicios.
2. **Plataforma**: El nivel de hardware y las capas más bajas de software.
3. **Middleware**: Mejora porque alguien se encargó de optimizar las operaciones que funcionan luego de salir de mi aplicación. Soporta abstracciones de:
   - RPC Llamada a proceso remoto. Mecanismo que dispongo para que un proceso llame a otro proceso que se ejecuta remotamente. Login es parte de un proceso Auth
   - RMI Llamada a método remoto. Método es parte del programa, Luego del request recibe el objeto como proxy y es una réplica en el cliente, ahí se ejecuta remotamente. authProxy.login();
   - Compiladores. Aplica optimizaciones en la distribución de las tareas en paralelo.

### Arquitectura del Sistema

División de componentes del sistema, y la ubicación de los componentes de la computadora en la red. Debe conocerse en todo momento para saber a dónde recurrir.

1. **Modelo Cliente-Servidor**: Lo diferencian las acciones que realizan, solicita y responde.
2. **Servicios proporcionados por múltiples servidores**, los servidores interactúan cuando es necesario.
   - Correo
   - DB
   - Balanceador de carga, soluciona la transparencia de acceso.
   - Replicación de datos.
3. **Servidores Proxy y cache**, Recibe un pedido y delega la tarea. El proxy no tiene capacidad de procesamiento.
4. **Proceso peer to peer**: no es requisito que sean todas réplicas.
5. **Cliente ligero**: abstraerse del canal de comunicación. Ejemplo SQL server con Azure

### Interfaces y objetos

Interfaz donde se define los métodos y no la implementación. Objeto de una instancia de una clase. Una clase que implementa una interfaz es un objeto. Un objeto es un proceso. Cómo voy a estructurar mi código y cómo se va a comportar. Instanciar las interfaces para ocultar la lógica de negocio.

### Mejorar prestaciones

- `List lista = new ArrayList();` Optimización.
- Transferir datos pequeños, paginación.
- Rapidez de trabajo computacional
- Balanceador de cargas
- Uso de cache (localstorage)
- Definir tiempo de expiración de cookies

### UDP

Abstracción de paso de mensajes. El proceso emisor puede transmitir un mensaje a uno receptor mediante datagramas, se debe especificar el destino utilizando un socket.

Socket mecanismo utilizado para establecer una comunicación.

### TCP

Proporciona una abstracción de un flujo stream de dos direcciones entre pares de procesos. Los streams son un bloque básico para la construcción de la comunicación productor/consumidor. No existe un destino, sino que se establece un canal de comunicación, los items de datos enviados son colocados en una cola de mensajes

Canal de comunicación: es el lugar donde se escribe y donde se lee. Antes de realizar la acción de leer o escribir, se debe poner de acuerdo el formato del mensaje, string, int, object.

El productor se bloquea porque está llena la cola de mensajes. Su estado depende del estado de la cola.

El consumidor se bloquea cuando la cola está vacía.

### Características de la comunicación entre procesos

- Se basa en 2 operaciones, enviar y recibir mensajes.
- Para que haya comunicación un proceso debe enviar y otro proceso debe recibir un mensaje. En TCP el destino está en la cola de mensajes.
- La actividad de enviar y recibir mensajes entre procesos implica la sincronización de procesos.
- Comunicación síncrona y asíncrona: a cada destino de mensaje se asocia una cola. Productor coloca mensaje en la cola remota. Los consumidores lo sacan de la cola local. Cada proceso tiene su cola. El productor se bloquea cuando la cola remota se llena, y el consumidor cuando la cola local está vacía.
- Es síncrona cuando receptores y receptores se sincronizan en cada mensaje. En TCP es una sola sincronización cuando se establece el canal. UDP es síncrona por defecto
- Es síncrona cuando envía y recibe son operaciones bloqueantes. A cada envío el proceso se bloquea, y recibe pasa lo mismo con el receptor. Si el mensaje se envía y nunca se recibe ambos quedan bloqueados. Lo solucionamos con tiempos de espera.
- Es asíncrona cuando enviar no es bloqueante. Permite a un proceso productor pueda continuar realizando una acción sin tener que esperar un mensaje del consumidor
- Transmisión de mensajes en paralelo con el emisor.
- La operación recibe puede ser bloqueante o no bloqueante. El buffer de recibe será llenado en segundo plano.
- Destino de los mensajes: mensajes enviados por pares (Dirección, Puerto), un hardware proceso tiene varios puertos. Mismo IP pero diferentes puertos.

1. puerto = destino del mensaje en la computadora.
2. Un puerto tiene un receptor y puede tener muchos emisores.
3. Los procesos servidores pueden tener muchos puertos por los que se puede recibir mensajes. Una app puede tener más de un puerto escuchando.
4. Cualquier proceso que conozca el puerto puede enviar mensajes.
5. Transparencia de ubicación. No cambiar la dirección/puerto donde se ejecuta el servicio. si se altera el servicio no estará disponible
6. Los puertos tienen la ventaja de proporcionar varios puntos de entrada.

### Fiabilidad

Que no haya pérdidas en la comunicación.

### Validez

Se garantiza que los mensajes se entregan sin que se pierda. Desarrollar la aplicación para que se garantice la fiabilidad mediante una confirmación.

### Integridad

Que llegue sin alteraciones. A un objeto serializado se le asigna un id, para que cuando se reconstruya el objeto tenga la misma firma. Si no ha sido corrompido.

### Ordenación

En algunas aplicaciones la entrega de mensajes en orden de emisión. La entrega desordenada se considera fallo.

### Socket

La comunicación entre proceso consiste en transmitir un mensaje con un emisor y un receptor. Se debe saber desde qué dirección y de qué puerto se emite un mensaje.

Los procesos pueden usar el mismo socket para enviar y recibir mensajes.

Los procesos pueden utilizar varios conectores para recibir mensajes

Un proceso no se puede compartir puertos con otro.

### Socket UDP

API java

InetAddress: no necesita definir explícitamente la dirección de internet, puede recibir una excepción UnknowHostException

### Aspectos a tener en cuenta sobre el datagram

- **Tamaño del mensaje**: El receptor especifica una cadena de byte donde se almacenará el mensaje recibido. mensajes hasta de 2^16 bytes. Si el mensaje es demasiado grande será truncado en la llegada a destino.
- **Bloqueo**:
  - UDP utiliza envío no bloqueante y recibe bloqueantes.
  - Recibe bloquea hasta que reciba un mensaje.
  - Puede establecerse un tiempo de espera.
  - Recibe debe ejecutar otra tarea en paralelo si es que no quiere esperar.
- **Tiempo de espera**
- **Recibe de cualquiera**:
  - No especifica de quién puede recibir los mensajes.
  - Acepta mensajes que se envían a su conector, depende de la app resolverlos.

### Fallos

- **Por omisión**: desechar mensajes ocasionalmente, por error detectado en la suma de comprobación, no queda espacio en el buffer de origen o destino
- **Por Ordenación**: los mensajes se entregan distinto al orden que se envía

### Datagram

Longitud, mensaje, dirección y número de puerto

Cliente crea socket para poder comunicarse

### Archivo property

clave=valor o clave:valor

### Bloqueo de servidor

Cuando la cola está llena y cuando está vacía.

Interbloqueo, el servidor mandó un mensaje que nunca llegó que el cliente está esperando.

La cola define el estado de cliente y servidor

### TCP

Proporciona una abstracción de un Flujo de Bytes, utiliza stream, previo al envío de un mensaje se ponen de acuerdo a cómo realizar el proceso de comunicación y la cola de mensajes. Los mensajes no tienen una dirección de destino sino una cola donde va a ser colocada, tanto proceso servidor como cliente tiene 2 colas, una local y una remota.

### Stream

- **Tamaño de mensaje**: la app elige la cantidad de datos que va a escribir/leer del stream. TCP decide cuánto dato transmitir como uno o más paquetes IP, En el destino los datos se leen según vayan pidiendo (Cliente)
- **Mensajes Perdidos**: TCP utiliza acuse de recibo de los mensajes. acuse es una confirmación. El emisor almacena registro de los paquetes IP enviados, y el receptor acusa el recibo de los paquetes que llegan.
- **Control de flujo**: TCP ajusta los procesos de L/E si el productor es más rápido que el consumidor lo bloquea momentáneamente
- **Duplicación y ordenación de mensajes**: Cada paquete IP tiene una identificación,
- **Destino de los mensajes**: Los procesos emisor y receptor establecen una comunicación antes de enviar mensajes. Luego solo escriben en el stream,
- **El cliente y servidor se conectan por un par de stream uno en cada dirección**.
- **Cuando algún proceso cierra el stream indica que no va a escribir más en su stream de salida**, Cualquier dato que se encuentra en cola será enviado al otro extremo.

### Aspectos Importantes

- Ambos procesos deben estar de acuerdo en el tipo de datos a ser transmitidos.
- **Bloqueo**: los datos escritos en un stream se almacenan en un buffer de memoria en el conector de destino cuando un proceso intenta leer una entrada

### Hilo

Datos servicios memoria que realiza una tarea en específico. Cuando creo un hilo debo asignar los recursos que necesita para cumplir su función. Una vez el servidor crea un hilo se le asigna a un cliente.

### Modelo de fallos

TCP usa checksum para aceptar o rechazar paquetes corruptos. y utiliza un número de secuencia para detectar y eliminar paquetes duplicados.

Para la propiedad de validez. Utiliza timeouts y retransmisión de paquetes perdidos.

Los procesos que utilizan la conexión no distinguen entre fallo de red y fallo de proceso que están en el otro extremo. Escriben en su cola por lo que no necesita de mantener la red.

### API Java

- **Server Socket**
  - Accept
  - Connect

Toma una petición connect de la cola si la cola está vacía se bloquea hasta que llegue petición. El accept da acceso a streams para comunicarse con el cliente.

- **Socket**
  - GetInputStream
  - GetOutputStream

Utiliza el DNS y puerto para crear el conector.

### Serialización de objetos java

Transformar un objeto en una secuencia de bytes para ser transmitida por la red o almacenada en un dispositivo. Si un objeto está compuesto por varios objetos se serializa todo. A excepción de propiedades u objetos que no deseo transmitir.

Se logra ocultar al momento de serializar mediante Transient para omitir ser enviado.

### Deserialización

Consiste en restablecer el estado de un objeto o conjunto de objetos desde su estado lineal, este proceso no tiene conocimiento de los tipos de los objetos en forma lineal.

Reflexión: Habilidad de preguntar por propiedades de la clase, sin conocerlas, permite crear clases a partir de nombres y crear constructores para una clase dada, con unos argumentos dados. Poder interpretar las secuencias de datos que recibo.

A bajo nivel la serialización y deserialización aplican reflexión.

Un bean es un objeto, inversor de control manipula o gestiona los beans. Bean, entity, Domain, PoJo, tienen el mismo significado. Es la definición de una clase que no tiene lógica de negocio, solo getter y setter y atributos. Se utilizan para mapear la base de datos.

Serializable señala que va a ser enviado o escrito en algún momento.

DAO: Objeto de acceso a datos.

Hay 2 formas de firmar, un Long suficientemente largo.

### Web 3 capas

Controllers -> Servicios -> DAO -> DB

La DB responde con un recordSet, DAO responde con un Bean, el servicio responde con un DTO, y el controller responde con un DTO

Toda la lógica debe estar en services.

Tendremos servicios que se especializan en un solo objeto, DAO lo mismo

### RMI

TCP y UDP tienen el concepto de mensaje como una estructura definida. En ambos casos el mensaje tiene una dirección. En ambos casos debe haber un receptor. y debe usar alguna medida para que no queden bloqueados,

RMI

Método: comportamiento de un objeto o función,

Tendremos un mecanismo para llamar a un método desde otra parte.

Proceso A Proceso B, en el proceso B tengo un objeto y el objeto tiene métodos

RMI permite a un objeto en b, provee un mecanismo para poder invocar un objeto de otro método ubicado en otra parte, Es una forma de comunicar proceso A y proceso B utilizando el mismo mecanismo que un programa orientado a objetos. Un proxy mantiene el mismo mecanismo. Al invocar en a ejecuta el código que encapsula el métodoX

Proxy: algo que recibe cosas y delega.,

El objeto remoto tiene la dirección de donde se encuentra el objeto concreto.

Todos los objetos que pueden recibir RMI deben ser objetos de un solo tipo, remoto es cuando se hereda de una interfaz. Un objeto

Marcamos un bean con una clase que hereda de abstractBean, cualquier clase que hereda de esa clase tendrá ID.

Se pueden tener objetos locales y objetos, local no puede ser utilizado en el otro directamente. Pero puedo hacer uso de objetos locales se deben serializar y llamar en métodos de ObjetosRemotos.

Por defecto es local se debe marcar como remoto.

RMI: es un middleware de comunicación orientado a objetos. Proporciona una solución para un lenguaje oo, permite portabilidad. Llevar de un entorno de ejecución a otro.

RMI no es multilenguaje pero si multiplataforma.

Permite que un objeto corriendo en una JVM, invoque métodos corriendo en otra JVM

Permite que una comunicación se comunique con objetos que residen en programas que se ejecutan en máquinas remotas. Permite pasar objetos como argumentos cuando se invocan esos métodos,

En lugar de crear un objeto el programador liga un objeto remoto con un representante local conocido co stub.

Los mensajes dirigidos a un objeto remoto se envían al stub local, como si fuera el objeto local.

El stub acepta los mensajes que se le envían y a su vez los envía al objeto remoto.

El resultado de la invocación de métodos en el objeto remoto se envía de regreso al stub local.

### Servidor de Nombres Java RMI

Para cada objeto se almacen; nombre-simbólico+referencia.

Cuando alguien llama a un nombre-retorna la dirección en memoria del objeto remoto.

Se puede acceder mediante la interfaz registry.

rmiRegistry comando para levantar el servidor

Primer paso levantar el servidor

Segundo poner en ejecución mi programa y se debe encargar de registrar los objetos remotos en el servidor

### Componentes de RMI

Servidor: en el sentido de proceso, crea un objeto remoto, crea referencias accesibles a este objeto y espera que el cliente invoque.

Una implementación RMI requiere que un objeto esté marcado como remoto. La clase interpreta estos métodos declarados en la interfaz y otros métodos.

El proxy tiene la lista de métodos de objetos remotos.

Heredando de rmi.remote, todos los métodos deben lanzar un tipo de excepción, a la vez en algún momento debe implementar una interfaz remota

Tanto cliente como servidor tienen que tener la declaración de la interfaz.

Lo que se hace es crear una librería que contenga los métodos remotos, distribuir la librería entre cliente y servidor

### Cómo se implementa interfaz remota

Deben heredar de rmi,remote

Todos los métodos deben manejar remoteExcepcion

Con la definición de la interfaz, el compilador genera proxies y esqueletos.

Clase remota: debe implementar la interfaz remota

Debe extender de java.rmi.server.UnicastRemoteObjetct

### Paso en la ejecución

1. El Servidor crea el objeto remoto
2. Registra el objeto remoto
3. Confirmación

Una vez que ya tiene el objeto remoto

### Objetos como argumentos

Si el objeto pasado como argumento implementa una interfaz remota se pasa una referencia. si el objeto remoto es compartido por las referencias previas y la nueva.

Si el objeto pasado como argumento no implementa la interfaz remote

se serializa y se pasa por valor

se crea en la JVM destino totalmente independiente del original,

### Características de la comunicación

Las llamadas a métodos remotos hacen transparentes al programador el uso de las primitivas básicas de comunicación, el mecanismo es el mismo para locales y remotos.

La estructura y el contenido de los mensajes es determinado por el compilador, es transparente al programador.

El direccionamiento es directo al contexto donde reside el objeto remoto

La comunicación es síncrona, espera que el método termine su ejecución para pedir otra acción. por defecto

Comunicación no persistente, el objeto remoto debe estar activo al momento de realizar la llamada, el objeto persiste y no la comunicación, Ej Objeto remoto a y b objetora.llamar(a)

### Objetos distribuidos e invocación remota

Interfaz remota: debe estar disponible en el cliente y servidor

compilar

rmic

registrar

java app

java cliente

Un proyecto con solo las interfaces de ese un jar, xjar

agregar al cliente y al servidor

Bean: mapeo de una entidad con una tabla de la DB

Si expongo un bean, expongo la estructura de mi DB, proveo información a posibles atacantes. Para evitar exponer datos sensibles se implementa un DTO: dato que va a ser transferido, va a salir de los servidores

DTO: similar a un bean, no define de forma directa o enmascara las relaciones entre objetos.

Cuando llega un pedido es un DTO, recibe un controller, le da al servicio, sigue siendo DTO, el servicio convierte a un bean, el dao ejecuta sql. el Dao retorna un bean, servicio convierte a DTO y controller retorna DTO

### URL mapping

Si se llama un recurso se ejecuta x código.

### Servlet

Se define a nivel de aplicación o contexto:

### Road Mapping

Requisitos:

Debe ser Cliente Servidor, estructuración de capas de software.

Controllers services y Daos

Servicios

Daos/repository

Beans

WebContent a excepción de web inf es público, cualquier usuario puede acceder a esa información.

SLF4J loguear en disco, niveles, OFF, fatal, error, warn info trace, all.

Con los métodos http se define lo que hará.

Propiedades de procesar un conjunto de datos. req, response.

Descargar apache tomcat 8

crear un proyecto dynamic web

### Api terminado

Solucionar problemas

- DB
- Volumen de paquetes en la red

Atacan performance

Resolvemos paginando los resultados.

No mandar todos los objetos y sus dependencias.

Enviar el id por si se requiere

Protegemos db con memoria y caché, usando un servidor cache

Agregar un servidor caché, que es un hashmap

Meter en memoria los datos más utilizados y más frecuentes

Política de saber cuáles son los datos que deben estar en memoria.

Redis, servidor de caché

Leer, escribir y borrar

Cuando se modifica una entidad se debe sacar de memoria, e ir de vuelta a la db por el request, y ahí si se escribe en memoria con los nuevos datos.

Esta la manera de al momento de modificar se debe ingresar de vuelta.

Al momento de eliminar, se saca de memoria.

### Anotaciones

@Cacheable

@CacheEdit

@CachePut

Se debe Cachear en el servicio. para ahorrar procesamiento y llamadas a db

Por defecto toma como key el ID

Investigar anotaciones de caché

Instalar redis

Marcar como servicio de windows

Instalar RedisInsight

### S6:clave_objeto

Profiler

Cliente ping

### En la aplicación

Agregar dependencias de redis

Configurar el puerto y host de redis

TTL tiempo de vida

Logginf.level=trace

@Transaccional

@Cacheable (value=”SD”, key=”api_contry_”+#id)

login.file

### Transacciones

Una transacción de DB es una única unidad lógica de trabajo que accede y posiblemente modifica la base de datos

Una transacción es un conjunto de operaciones la cual idealmente no debe poder dividirse

Encapsula un conjunto de operaciones a nivel de DB.

Es atómico porque es indivisible, todo o nada.

Todos los métodos públicos son transaccionales

Spring maneja por defecto transacciones anidadas

### Configuración de transacciones

El alcance de la transacción es la profundidad del método.

Cómo se configura el proxy de transacciones depende de cuántos proxy tiene el método

### Propagación de la transacción

Cualquier aplicación implica una serie de componentes que realizan una llamada a otros servicios y componentes.

La propagación de la transacción indica si algún componente servicio participará o no en una transacción y cómo se comportará el componente o servicio si tiene o no una transacción creada.

Los métodos del servicio 1 crea una transacción, en los demás reutilizan la transacción 1.

Si la transacción aún no existe crea una transacción.

### Tipos de transacciones

- Required
- Supports
- Not_supported
- Requires_New
- Never
- Mandatory

La transacción por defecto es Required

Si el método que está llamando tiene una transacción, el método usa la transacción existente.

- **Required**: Usa una transacción, y si no existe la crea
- **Support**: si se llama directamente no crea una transacción, si existe una la utiliza
- **Not_Supported**: si se llama directamente no crea una transacción, si se llama desde otro servicio no utiliza la transacción existente, se ejecuta sin transacción. nunca se ejecuta en una transacción
- **Requires_New**: si se llamada directamente crea una transacción, si es llamada desde otro servicio si tiene una transacción no hará uso de una transacción existente, creará su propia transacción, si no tiene crea su transacción, entonces siempre crea una transacción.
- **Never**: si es llamado directamente no se creará una transacción, si se llama de otro servicio si tiene una transacción se lanza una excepción, si no tiene una transacción se ejecuta sin transacción, entonces, no necesita transacción, y si existe falla
- **Mandatory**: si se llama directamente lanza una excepción, si se llama desde otro servicio, si tiene transacción entonces usa su transacción, si no tiene una transacción falla.

### Autenticar

Corroborar quien dice ser el usuario

### Autorizar

Una vez autenticado, corroborar que puede hacer el usuario.

Gran autority conjunto de permisos que tiene el autor

Objeto principal: es una relación entre usuario y permiso, o roles

### Stateless

JWT

Objeto Principal

Filtros spring security

Csrf

Cors

### Balanceador de carga

- Recibe y delega los pedidos

- Tomcat user.xml 

- servers.xml

- tag server: port
